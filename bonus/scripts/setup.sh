#!/bin/bash

# K3D Cluster, ArgoCD ve GitLab Setup Script
# Bu script k3d cluster olu≈üturur, ArgoCD'yi kurar ve GitLab'ƒ± yapƒ±landƒ±rƒ±r

ARGOCD_PORT=""
GITLAB_PORT=""
PORT_FORWARD_PID=""
GITLAB_PID=""
set -e  # Hata durumunda scripti durdur

echo "üöÄ K3D Cluster, ArgoCD ve GitLab kurulumu ba≈ülatƒ±lƒ±yor..."

# Renkli output i√ßin
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Gerekli ara√ßlarƒ± kontrol et
check_requirements() {
    echo -e "${BLUE}üìã Gerekli ara√ßlar kontrol ediliyor...${NC}"
    
    if ! command -v k3d &> /dev/null; then
        echo -e "${RED}‚ùå k3d bulunamadƒ±. L√ºtfen k3d'yi kurun.${NC}"
        exit 1
    fi
    
    if ! command -v kubectl &> /dev/null; then
        echo -e "${RED}‚ùå kubectl bulunamadƒ±. L√ºtfen kubectl'i kurun.${NC}"
        exit 1
    fi
    
    if ! command -v argocd &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  argocd CLI bulunamadƒ±. ArgoCD CLI kurulacak...${NC}"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker bulunamadƒ±. L√ºtfen Docker'ƒ± kurun.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ T√ºm gereksinimler kar≈üƒ±landƒ±.${NC}"
}

# GitLab kurulumu
install_gitlab() {
    echo -e "${BLUE}ü¶ä GitLab Community Edition kuruluyor...${NC}"
    
    # GitLab namespace olu≈ütur
    kubectl create namespace gitlab --dry-run=client -o yaml | kubectl apply -f -
    
    # GitLab Helm repository ekle (eƒüer Helm varsa)
    if command -v helm &> /dev/null; then
        echo -e "${BLUE}üéØ GitLab Helm chart ile kuruluyor...${NC}"
        helm repo add gitlab https://charts.gitlab.io/
        helm repo update
        
        # GitLab'ƒ± basit yapƒ±landƒ±rma ile kur
        helm upgrade --install gitlab gitlab/gitlab \
            --namespace gitlab \
            --set global.hosts.domain=localhost \
            --set global.hosts.externalIP=127.0.0.1 \
            --set certmanager.install=false \
            --set nginx-ingress.enabled=false \
            --set prometheus.install=false \
            --set gitlab-runner.install=false \
            --set registry.enabled=false \
            --set global.ingress.enabled=false \
            --timeout 600s
    else
        echo -e "${BLUE}üê≥ GitLab Docker container ile kuruluyor...${NC}"
        # Docker ile GitLab √ßalƒ±≈ütƒ±r
        docker run -d \
            --name gitlab \
            --hostname gitlab.localhost \
            -p 8080:80 \
            -p 8443:443 \
            -p 8022:22 \
            --volume gitlab-config:/etc/gitlab \
            --volume gitlab-logs:/var/log/gitlab \
            --volume gitlab-data:/var/opt/gitlab \
            --restart unless-stopped \
            gitlab/gitlab-ce:latest
        
        echo -e "${YELLOW}‚è≥ GitLab ba≈ülatƒ±lƒ±yor (bu i≈ülem 2-3 dakika s√ºrebilir)...${NC}"
        
        # GitLab'ƒ±n hazƒ±r olmasƒ±nƒ± bekle
        local retries=0
        local max_retries=60
        
        while [ $retries -lt $max_retries ]; do
            if docker logs gitlab 2>&1 | grep -q "gitlab Reconfigured!"; then
                echo -e "${GREEN}‚úÖ GitLab ba≈üarƒ±yla ba≈ülatƒ±ldƒ±.${NC}"
                break
            fi
            
            retries=$((retries + 1))
            echo -e "${YELLOW}‚è≥ GitLab ba≈ülatƒ±lƒ±yor... ($retries/$max_retries)${NC}"
            sleep 5
        done
        
        if [ $retries -eq $max_retries ]; then
            echo -e "${RED}‚ùå GitLab ba≈ülatma timeout'u. Loglarƒ± kontrol edin: docker logs gitlab${NC}"
            return 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ GitLab kuruldu.${NC}"
}

# GitLab root ≈üifresini al
get_gitlab_password() {
    echo -e "${BLUE}üîê GitLab root ≈üifresi alƒ±nƒ±yor...${NC}"
    
    if docker ps | grep -q gitlab; then
        # Docker container'dan ≈üifreyi al
        local retries=0
        local max_retries=30
        
        while [ $retries -lt $max_retries ]; do
            GITLAB_PASSWORD=$(docker exec gitlab grep 'Password:' /etc/gitlab/initial_root_password 2>/dev/null | awk '{print $2}' || echo "")
            
            if [ -n "$GITLAB_PASSWORD" ]; then
                echo -e "${GREEN}‚úÖ GitLab root ≈üifresi: ${GITLAB_PASSWORD}${NC}"
                echo "$GITLAB_PASSWORD" > gitlab-password.txt
                echo -e "${BLUE}üíæ ≈ûifre 'gitlab-password.txt' dosyasƒ±na kaydedildi.${NC}"
                return 0
            fi
            
            retries=$((retries + 1))
            echo -e "${YELLOW}‚è≥ ≈ûifre dosyasƒ± olu≈üturuluyor... ($retries/$max_retries)${NC}"
            sleep 5
        done
        
        echo -e "${YELLOW}‚ö†Ô∏è  Otomatik ≈üifre alƒ±namadƒ±. GitLab UI'dan ≈üifreyi manuel olarak deƒüi≈ütirebilirsiniz.${NC}"
        GITLAB_PASSWORD="manuel_olarak_deƒüi≈ütirin"
    else
        # Kubernetes deployment i√ßin
        echo -e "${YELLOW}‚ö†Ô∏è  Helm kurulumu i√ßin GitLab ≈üifresi kubectl ile alƒ±nmalƒ±.${NC}"
        GITLAB_PASSWORD="kubectl_ile_alin"
    fi
}

# K3D cluster olu≈ütur
create_k3d_cluster() {
    echo -e "${BLUE}üîß K3D cluster olu≈üturuluyor...${NC}"
    
    # Mevcut cluster'ƒ± sil (varsa)
    if k3d cluster list | grep -q "mycluster"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Mevcut 'mycluster' siliniyor...${NC}"
        k3d cluster delete mycluster
    fi
    
    # Yeni cluster olu≈ütur
    k3d cluster create mycluster \
        --servers 1 \
        --agents 1 \
        -p "8080:80@loadbalancer" \
        -p "8443:443@loadbalancer"
    
    echo -e "${GREEN}‚úÖ K3D cluster olu≈üturuldu.${NC}"
}

# ArgoCD kurulumu
install_argocd() {
   echo -e "${BLUE}üì¶ ArgoCD kuruluyor...${NC}"
   
   # ArgoCD namespace olu≈ütur
   kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
   
   # ArgoCD manifest'lerini uygula
   kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
   
   echo -e "${YELLOW}‚è≥ ArgoCD pod'larƒ±nƒ±n hazƒ±r olmasƒ± bekleniyor...${NC}"
   kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

   # Endpoints ve EndpointSlices'larƒ± g√∂r√ºn√ºr yap
   echo -e "${BLUE}üîß Endpoints ve EndpointSlices g√∂r√ºn√ºr yapƒ±lƒ±yor...${NC}"
   kubectl patch configmap argocd-cm -n argocd --type='json' -p='[{"op": "remove", "path": "/data/resource.exclusions"}]' 2>/dev/null || echo -e "${YELLOW}‚ÑπÔ∏è  resource.exclusions zaten mevcut deƒüil${NC}"
   kubectl rollout restart deployment argocd-server -n argocd
   kubectl wait --for=condition=available --timeout=300s deployment argocd-server -n argocd

   echo -e "${GREEN}‚úÖ ArgoCD kuruldu ve yapƒ±landƒ±rƒ±ldƒ±.${NC}"
}

# ArgoCD ≈üifresini al
get_argocd_password() {
    echo -e "${BLUE}üîê ArgoCD admin ≈üifresi alƒ±nƒ±yor...${NC}"
    
    # ≈ûifrenin hazƒ±r olmasƒ±nƒ± bekle
    while ! kubectl -n argocd get secret argocd-initial-admin-secret &> /dev/null; do
        echo -e "${YELLOW}‚è≥ ArgoCD secret hazƒ±rlanƒ±yor...${NC}"
        sleep 5
    done
    
    ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
    echo -e "${GREEN}‚úÖ ArgoCD admin ≈üifresi: ${ARGOCD_PASSWORD}${NC}"
    
    # ≈ûifreyi dosyaya kaydet
    echo "$ARGOCD_PASSWORD" > argocd-password.txt
    echo -e "${BLUE}üíæ ≈ûifre 'argocd-password.txt' dosyasƒ±na kaydedildi.${NC}"
}

# Find available port
find_available_port() {
    local start_port=${1:-8081}
    local max_port=$((start_port + 50))
    
    for port in $(seq $start_port $max_port); do
        if ! lsof -i :$port >/dev/null 2>&1 && ! netstat -an | grep -q ":$port "; then
            echo $port
            return 0
        fi
    done
    
    echo -e "${RED}‚ùå $start_port ve $max_port arasƒ±nda kullanƒ±labilir port bulunamadƒ±${NC}" >&2
    return 1
}

start_port_forward() {
    echo -e "${BLUE}üåê Port forwarding ba≈ülatƒ±lƒ±yor...${NC}"
    
    # Mevcut port forwarding'i durdur
    pkill -f "kubectl port-forward.*argocd-server" || true
    sleep 2
    
    # Kullanƒ±labilir port bul
    echo -e "${YELLOW}üîç Kullanƒ±labilir port aranƒ±yor...${NC}"
    ARGOCD_PORT=$(find_available_port 8081)
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå ArgoCD i√ßin kullanƒ±labilir port bulunamadƒ±${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Port kullanƒ±lƒ±yor: $ARGOCD_PORT${NC}"
    
    # ArgoCD server pod'unun hazƒ±r olmasƒ±nƒ± bekle
    echo -e "${YELLOW}‚è≥ ArgoCD server pod'unun hazƒ±r olmasƒ± bekleniyor...${NC}"
    kubectl wait --for=condition=Ready --timeout=300s pod -l app.kubernetes.io/name=argocd-server -n argocd
    
    # Yeni port forwarding ba≈ülat (arka planda)
    kubectl port-forward svc/argocd-server -n argocd $ARGOCD_PORT:443 > /dev/null 2>&1 &
    PORT_FORWARD_PID=$!
    
    echo -e "${GREEN}‚úÖ Port forwarding ba≈ülatƒ±ldƒ± (PID: $PORT_FORWARD_PID)${NC}"
    echo -e "${BLUE}üåç ArgoCD UI: https://localhost:$ARGOCD_PORT${NC}"
    
    # Baƒülantƒ±yƒ± test et
    echo -e "${YELLOW}‚è≥ ArgoCD server baƒülantƒ±sƒ± test ediliyor...${NC}"
    local retries=0
    local max_retries=30
    
    while [ $retries -lt $max_retries ]; do
        if curl -k -s --connect-timeout 2 https://localhost:$ARGOCD_PORT >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ ArgoCD server $ARGOCD_PORT portunda eri≈üilebilir.${NC}"
            return 0
        fi
        
        # Port forward process'inin √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol et
        if ! kill -0 $PORT_FORWARD_PID 2>/dev/null; then
            echo -e "${RED}‚ùå Port forwarding process durdu. Yeniden ba≈ülatƒ±lƒ±yor...${NC}"
            kubectl port-forward svc/argocd-server -n argocd $ARGOCD_PORT:443 > /dev/null 2>&1 &
            PORT_FORWARD_PID=$!
        fi
        
        retries=$((retries + 1))
        echo -e "${YELLOW}‚è≥ Deneme $retries/$max_retries - ArgoCD server $ARGOCD_PORT portunda bekleniyor...${NC}"
        sleep 2
    done
    
    echo -e "${RED}‚ùå ArgoCD server $ARGOCD_PORT portunda kararlƒ± baƒülantƒ± kurulamadƒ±.${NC}"
    return 1
}

# ArgoCD'ye giri≈ü yap
login_argocd() {
    echo -e "${BLUE}üîê ArgoCD'ye giri≈ü yapƒ±lƒ±yor...${NC}"
    
    # Birka√ß deneme yap
    for i in {1..5}; do
        if argocd login localhost:$ARGOCD_PORT --username admin --password "$ARGOCD_PASSWORD" --insecure; then
            echo -e "${GREEN}‚úÖ ArgoCD'ye ba≈üarƒ±yla giri≈ü yapƒ±ldƒ±.${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Giri≈ü denemesi $i/5 ba≈üarƒ±sƒ±z. Tekrar deneniyor...${NC}"
            sleep 5
        fi
    done
    
    echo -e "${RED}‚ùå ArgoCD'ye giri≈ü yapƒ±lamadƒ±.${NC}"
    return 1
}

# GitLab repository ekle
add_gitlab_repository() {
    echo -e "${BLUE}üìö GitLab repository ArgoCD'ye ekleniyor...${NC}"
    
    # GitLab repository URL'i (yerel GitLab instance)
    local gitlab_repo_url="http://localhost:8080/root/my-app-repo.git"
    
    echo -e "${YELLOW}üí° GitLab repository manuel olarak olu≈üturulmalƒ±:${NC}"
    echo -e "${BLUE}  1. GitLab UI'da (http://localhost:8080) 'root' kullanƒ±cƒ±sƒ± ile giri≈ü yapƒ±n${NC}"
    echo -e "${BLUE}  2. 'my-app-repo' adƒ±nda yeni bir proje olu≈üturun${NC}"
    echo -e "${BLUE}  3. Manifest dosyalarƒ±nƒ±zƒ± bu repository'ye y√ºkleyin${NC}"
    
    # Repository'yi ArgoCD'ye ekle (GitLab hazƒ±r olduktan sonra)
    if argocd repo add $gitlab_repo_url --username root --password "$GITLAB_PASSWORD" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ GitLab repository ba≈üarƒ±yla eklendi.${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Repository hen√ºz mevcut deƒüil veya credentials hatalƒ±.${NC}"
        echo -e "${BLUE}üí° GitLab repository hazƒ±r olduktan sonra manuel olarak ekleyin:${NC}"
        echo -e "${BLUE}  argocd repo add $gitlab_repo_url --username root --password [gitlab-password]${NC}"
    fi
}

# Uygulama olu≈ütur (GitLab ile)
create_application_gitlab() {
    echo -e "${BLUE}üì± ArgoCD uygulamasƒ± GitLab ile olu≈üturuluyor...${NC}"
    
    local gitlab_repo_url="http://localhost:8080/root/my-app-repo.git"
    
    if argocd app create my-app \
        --repo $gitlab_repo_url \
        --path manifests \
        --dest-server https://kubernetes.default.svc \
        --dest-namespace default \
        --revision HEAD 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Uygulama GitLab repository ile olu≈üturuldu.${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Uygulama olu≈üturulamadƒ±. GitLab repository hen√ºz hazƒ±r olmayabilir.${NC}"
        echo -e "${BLUE}üí° GitLab repository hazƒ±r olduktan sonra manuel olarak olu≈üturun:${NC}"
        echo -e "${BLUE}  argocd app create my-app --repo $gitlab_repo_url --path manifests --dest-server https://kubernetes.default.svc --dest-namespace default${NC}"
    fi
}

# Uygulama sync et
sync_application() {
    echo -e "${BLUE}üîÑ Uygulama sync ediliyor...${NC}"
    
    if argocd app sync my-app 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Uygulama sync edildi.${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Uygulama sync edilemedi. Uygulama hen√ºz mevcut olmayabilir.${NC}"
    fi
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}üßπ Cleanup i≈ülemi ba≈ülatƒ±lƒ±yor...${NC}"
    if [[ -n "$PORT_FORWARD_PID" ]]; then
        kill $PORT_FORWARD_PID 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Port forwarding durduruldu.${NC}"
    fi
    
    if [[ -n "$GITLAB_PID" ]]; then
        kill $GITLAB_PID 2>/dev/null || true
        echo -e "${GREEN}‚úÖ GitLab process durduruldu.${NC}"
    fi
}

# Cleanup'ƒ± script bittiƒüinde √ßalƒ±≈ütƒ±r
trap cleanup EXIT

# System reset/cleanup
reset_system() {
    echo -e "${BLUE}üßπ Sistem sƒ±fƒ±rlanƒ±yor...${NC}"
    
    # Port forwarding'i durdur
    echo -e "${YELLOW}üîå Port forwarding i≈ülemleri durduruluyor...${NC}"
    pkill -f "kubectl port-forward.*argocd-server" || true
    
    # GitLab Docker container'ƒ±nƒ± durdur ve sil
    echo -e "${YELLOW}üê≥ GitLab Docker container durduruluyor...${NC}"
    docker stop gitlab 2>/dev/null || true
    docker rm gitlab 2>/dev/null || true
    
    # GitLab volumes'larƒ± sil (opsiyonel)
    echo -n "GitLab verilerini de silmek istiyor musunuz? (y/N): "
    read -r confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        docker volume rm gitlab-config gitlab-logs gitlab-data 2>/dev/null || true
        echo -e "${GREEN}‚úÖ GitLab verileri silindi.${NC}"
    fi
    
    # K3d cluster'ƒ± sil
    echo -e "${YELLOW}üóëÔ∏è  K3d cluster 'mycluster' siliniyor...${NC}"
    if k3d cluster list | grep -q "mycluster"; then
        k3d cluster delete mycluster
        echo -e "${GREEN}‚úÖ K3D cluster 'mycluster' silindi.${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  K3d cluster 'mycluster' bulunamadƒ±.${NC}"
    fi
    
    # ≈ûifre dosyalarƒ±nƒ± sil
    rm -f argocd-password.txt gitlab-password.txt argocd-connection.txt gitlab-connection.txt
    echo -e "${GREEN}‚úÖ ≈ûifre dosyalarƒ± silindi.${NC}"
    
    # ArgoCD config'ini sil
    ARGOCD_CONFIG_DIR="$HOME/.argocd"
    if [ -d "$ARGOCD_CONFIG_DIR" ]; then
        rm -rf "$ARGOCD_CONFIG_DIR"
        echo -e "${GREEN}‚úÖ ArgoCD config dizini silindi.${NC}"
    fi
    
    echo -e "${GREEN}üéâ Sistem sƒ±fƒ±rlama tamamlandƒ±!${NC}"
}

# Yardƒ±m g√∂ster
show_help() {
    echo -e "${BLUE}üéØ K3D Cluster, ArgoCD ve GitLab Setup Script${NC}"
    echo -e "${BLUE}=============================================\n${NC}"
    echo -e "Kullanƒ±m: $0 [SE√áENEK]"
    echo -e ""
    echo -e "Se√ßenekler:"
    echo -e "  setup, -s, --setup     K3D cluster, ArgoCD ve GitLab kur (varsayƒ±lan)"
    echo -e "  reset, -r, --reset     Sistem sƒ±fƒ±rla/temizle"
    echo -e "  help, -h, --help       Bu yardƒ±m mesajƒ±nƒ± g√∂ster"
    echo -e ""
    echo -e "√ñrnekler:"
    echo -e "  $0                     # Setup (varsayƒ±lan i≈ülem)"
    echo -e "  $0 setup              # K3D, ArgoCD ve GitLab kur"
    echo -e "  $0 reset              # Sistem sƒ±fƒ±rla/temizle"
    echo -e "  $0 help               # Yardƒ±m g√∂ster"
    echo -e ""
    echo -e "${BLUE}ü¶ä GitLab Bilgileri:${NC}"
    echo -e "  ‚Ä¢ GitLab Docker container ile kurulacak"
    echo -e "  ‚Ä¢ Yerel eri≈üim: http://localhost:8080"
    echo -e "  ‚Ä¢ SSH eri≈üim: localhost:8022"
    echo -e "  ‚Ä¢ Varsayƒ±lan kullanƒ±cƒ±: root"
}

# Setup function
setup_system() {
    echo -e "${BLUE}üéØ K3D Cluster, ArgoCD ve GitLab Setup Script${NC}"
    echo -e "${BLUE}=============================================\n${NC}"
    
    check_requirements
    
    # GitLab'ƒ± √∂nce kur (en uzun s√ºren i≈ülem)
    install_gitlab
    get_gitlab_password
    
    # K3D ve ArgoCD'yi kur
    create_k3d_cluster
    install_argocd
    get_argocd_password
    
    if start_port_forward; then
        if login_argocd; then
            add_gitlab_repository
            create_application_gitlab
            sync_application
            
            echo -e "\n${GREEN}üéâ Kurulum tamamlandƒ±!${NC}"
            echo -e "${BLUE}üìã √ñzet:${NC}"
            echo -e "${BLUE}  ‚Ä¢ GitLab UI: http://localhost:8080${NC}"
            echo -e "${BLUE}  ‚Ä¢ GitLab Kullanƒ±cƒ±: root${NC}"
            echo -e "${BLUE}  ‚Ä¢ GitLab ≈ûifre: $GITLAB_PASSWORD${NC}"
            echo -e "${BLUE}  ‚Ä¢ ArgoCD UI: https://localhost:$ARGOCD_PORT${NC}"
            echo -e "${BLUE}  ‚Ä¢ ArgoCD Kullanƒ±cƒ±: admin${NC}"
            echo -e "${BLUE}  ‚Ä¢ ArgoCD ≈ûifre: $ARGOCD_PASSWORD${NC}"
            echo -e "${BLUE}  ‚Ä¢ ArgoCD ≈ûifre dosyasƒ±: argocd-password.txt${NC}"
            echo -e "${BLUE}  ‚Ä¢ GitLab ≈ûifre dosyasƒ±: gitlab-password.txt${NC}"
            echo -e "${BLUE}  ‚Ä¢ Kullanƒ±lan port: $ARGOCD_PORT${NC}"
            echo -e "\n${YELLOW}üí° Port forwarding arka planda √ßalƒ±≈üƒ±yor. Durdurmak i√ßin Ctrl+C basƒ±n.${NC}"
            echo -e "\n${BLUE}üìñ Sonraki Adƒ±mlar:${NC}"
            echo -e "${BLUE}  1. GitLab'a giri≈ü yapƒ±n: http://localhost:8080 (root / $GITLAB_PASSWORD)${NC}"
            echo -e "${BLUE}  2. 'my-app-repo' adƒ±nda yeni proje olu≈üturun${NC}"
            echo -e "${BLUE}  3. Kubernetes manifest dosyalarƒ±nƒ±zƒ± 'manifests' klas√∂r√ºne y√ºkleyin${NC}"
            echo -e "${BLUE}  4. ArgoCD'de repository ve uygulamayƒ± manuel olarak yapƒ±landƒ±rƒ±n${NC}"
            
            # Baƒülantƒ± bilgilerini dosyaya kaydet
            cat > connection-info.txt << EOF
# GitLab Baƒülantƒ± Bilgileri
GITLAB_URL=http://localhost:8080
GITLAB_SSH=localhost:8022
GITLAB_USERNAME=root
GITLAB_PASSWORD=$GITLAB_PASSWORD

# ArgoCD Baƒülantƒ± Bilgileri
ARGOCD_URL=https://localhost:$ARGOCD_PORT
ARGOCD_USERNAME=admin
ARGOCD_PASSWORD=$ARGOCD_PASSWORD

# Repository URL (GitLab'da proje olu≈üturduktan sonra)
GITLAB_REPO_URL=http://localhost:8080/root/my-app-repo.git
EOF
            echo -e "${BLUE}üíæ T√ºm baƒülantƒ± bilgileri 'connection-info.txt' dosyasƒ±na kaydedildi.${NC}"
            
            # Script √ßalƒ±≈ümaya devam etsin
            echo -e "${BLUE}‚è≥ Script √ßalƒ±≈ümaya devam ediyor. Durdurmak i√ßin Ctrl+C basƒ±n...${NC}"
            wait
        else
            echo -e "\n${YELLOW}‚ö†Ô∏è  Kurulum tamamlandƒ± ancak ArgoCD giri≈üi ba≈üarƒ±sƒ±z.${NC}"
            echo -e "${BLUE}üí° ArgoCD'ye manuel olarak eri≈üebilirsiniz: https://localhost:$ARGOCD_PORT${NC}"
            echo -e "${BLUE}üí° Kullanƒ±cƒ±: admin, ≈ûifre: $ARGOCD_PASSWORD${NC}"
        fi
    else
        echo -e "\n${RED}‚ùå Port forwarding sorunlarƒ± nedeniyle kurulum ba≈üarƒ±sƒ±z.${NC}"
        echo -e "${BLUE}üí° Script'i tekrar √ßalƒ±≈ütƒ±rmayƒ± deneyin veya portlarƒ±n kullanƒ±labilir olduƒüunu kontrol edin.${NC}"
    fi
}

# Interactive menu
interactive_menu() {
    echo -e "${BLUE}üéØ K3D Cluster, ArgoCD ve GitLab Setup Script${NC}"
    echo -e "${BLUE}=============================================\n${NC}"
    echo -e "Se√ßenekler:"
    echo -e "  1) üöÄ Setup (K3D + ArgoCD + GitLab kur)"
    echo -e "  2) üßπ Reset (Sistemi temizle)"
    echo -e "  3) ‚ùì Help (Yardƒ±m)"
    echo -e "  4) üö™ Exit (√áƒ±kƒ±≈ü)"
    echo -e ""
    echo -n "Se√ßiminizi yapƒ±n (1-4): "
    read -r choice
    
    case $choice in
        1)
            setup_system
            ;;
        2)
            echo -e "${RED}‚ö†Ô∏è  Bu i≈ülem k3d cluster, GitLab ve t√ºm ArgoCD verilerini silecek!${NC}"
            echo -n "Emin misiniz? (y/N): "
            read -r confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                reset_system
            else
                echo -e "${BLUE}‚ÑπÔ∏è  Reset iptal edildi.${NC}"
            fi
            ;;
        3)
            show_help
            ;;
        4)
            echo -e "${BLUE}üëã √áƒ±kƒ±lƒ±yor...${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Ge√ßersiz se√ßim: $choice${NC}"
            interactive_menu
            ;;
    esac
}

# Main function
main() {
    case "${1:-menu}" in
        setup|-s|--setup)
            setup_system
            ;;
        reset|-r|--reset)
            echo -e "${RED}‚ö†Ô∏è  Bu i≈ülem k3d cluster, GitLab ve t√ºm ArgoCD verilerini silecek!${NC}"
            echo -n "Emin misiniz? (y/N): "
            read -r confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                reset_system
            else
                echo -e "${BLUE}‚ÑπÔ∏è  Reset iptal edildi.${NC}"
            fi
            ;;
        menu|-m|--menu|"")
            interactive_menu
            ;;
        help|-h|--help)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Bilinmeyen se√ßenek: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Script'i √ßalƒ±≈ütƒ±r
main "$@"